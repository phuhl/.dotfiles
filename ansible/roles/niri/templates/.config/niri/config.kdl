// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.

// spawn-at-startup "alacritty"

input {
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            layout "us(colemak)"
        }

        // You can set the keyboard repeat parameters. The defaults match wlroots and sway.
        // Delay is in milliseconds before the repeat starts. Rate is in characters per second.
        repeat-delay 200
        repeat-rate 30

        // Niri can remember the keyboard layout globally (the default) or per-window.
        // - "global" - layout change is global for all windows.
        // - "window" - layout is tracked for each window individually.
        // track-layout "global"
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        tap
        // dwt
        // dwtp
        // natural-scroll
        // accel-speed 0.2
        accel-profile "adaptive"
        // tap-button-map "left-middle-right"
    }

    mouse {
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
    }

    trackpoint {
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
    }

    tablet {
        // Set the name of the output (see below) which the tablet will map to.
        // If this is unset or the output does not exist, the tablet maps to one of the
        // existing outputs.
        map-to-output "eDP-1"
    }

    touch {
        // Set the name of the output (see below) which touch input will map to.
        // If this is unset or the output does not exist, touch input maps to one of the
        // existing outputs.
        map-to-output "eDP-1"
    }

    // By default, niri will take over the power button to make it sleep
    // instead of power off.
    // Uncomment this if you would like to configure the power button elsewhere
    // (i.e. logind.conf).
    // disable-power-key-handling

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // focus-follows-mouse
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Remember to uncomment the node by removing "/-"!
/-output "eDP-1" {
    // Uncomment this line to disable this output.
    // off

    // Scale is a floating-point number, but at the moment only integer values work.
    scale 2.0

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    mode "1920x1080@120.030"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // It the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=1280 y=0
}

layout {
    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you do not like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.

    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
        // off

        // How many logical pixels the ring extends out from the windows.
        width 4

        // Colors can be set in a variety of ways:
        // - CSS named colors: "red"
        // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
        // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

        // Color of the ring on the active monitor.
        active-color "#ff0000"

        // Color of the ring on inactive monitors.
        inactive-gradient from="#51d0ffbb" to="#51ffecbb" angle=-30

        // Additionally, theres a legacy RGBA syntax:
        // active-color 127 200 255 255

        // You can also use gradients. They take precedence over solid colors.
        // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
        // The angle is the same as in linear-gradient, and is optional,
        // defaulting to 180 (top-to-bottom gradient).
        // You can use any CSS linear-gradient tool on the web to set these up.
        //
        active-gradient from="#51d0ff" to="#51ffec" angle=-30

        // You can also color the gradient relative to the entire view
        // of the workspace, rather than relative to just the window itself.
        // To do that, set relative-to="workspace-view".
        //
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can also add a border. It is similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.


        width 4
        active-color "#50505000"
        inactive-color "#50505000"

        // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // Set gaps around windows in logical pixels.
    gaps 16

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 32
        // right 32
        // top 64
        // bottom 64
    }

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "on-overflow", focusing a column will center it if it does not fit
    //   together with the previously focused column.
    // - "always", the focused column will always be centered.
    center-focused-column "never"
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// spawn-at-startup "alacritty" "-e" "fish"


spawn-at-startup "~/.config/niri/niriautostart.sh"

// You can override environment variables for processes spawned by niri.
environment {
    // Set a variable like this:
    // QT_QPA_PLATFORM "wayland"

    // Remove a variable by using null as the value:
    // DISPLAY null
}

cursor {
    // Change the theme and size of the cursor as well as set the
    // `XCURSOR_THEME` and `XCURSOR_SIZE` env variables.
    // xcursor-theme "default"
    // xcursor-size 24
    xcursor-theme "breeze_cursors"
    xcursor-size 24
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some rounded corners.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
// screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
screenshot-path null

// Settings for the "Important Hotkeys" overlay.
hotkey-overlay {
    // Uncomment this line if you do not want to see the hotkey help at niri startup.
    skip-at-startup
}

// Animation settings.
animations {
    workspace-switch {
        spring damping-ratio=0.8 stiffness=1000 epsilon=0.0001
    }

    window-open {
        spring damping-ratio=0.7 stiffness=800 epsilon=0.0001
    }

    window-close {
        duration-ms 150
        curve "ease-out-quad"
    }

    horizontal-view-movement {
        spring damping-ratio=0.8 stiffness=2000 epsilon=0.00001
    }

    window-movement {
        spring damping-ratio=0.6 stiffness=800 epsilon=0.0001
    }

    window-resize {
        spring damping-ratio=0.6 stiffness=800 epsilon=0.0001
    }

    config-notification-open-close {
        spring damping-ratio=0.6 stiffness=1000 epsilon=0.001
    }
}

// Window rules let you adjust behavior for individual windows.
// They are processed in order of appearance in this file.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    // Match directives control which windows this rule will apply to.
    // You can match by app-id and by title.
    // The window must match all properties of the match directive.
    match app-id="org.myapp.MyApp" title="My Cool App"

    // There can be multiple match directives. A window must match any one
    // of the rules match directives.
    //
    // If there are no match directives, any window will match the rule.
    match title="Second App"

    // You can also add exclude directives which have the same properties.
    // If a window matches any exclude directive, it will not match this rule.
    //
    // Both app-id and title are regular expressions.
    // Raw KDL strings are helpful here.
    exclude app-id=r#"\.unwanted\."#

    // Here are the properties that you can set on a window rule.
    // You can override the default column width.
    default-column-width { proportion 0.75; }

    // You can set the output that this window will initially open on.
    // If such an output does not exist, it will open on the currently
    // focused output as usual.
    open-on-output "eDP-1"

    // Make this window open as a maximized column.
    open-maximized true

    // Make this window open fullscreen.
    open-fullscreen true
    // You can also set this to false to prevent a window from opening fullscreen.
    // open-fullscreen false
}

window-rule {
    geometry-corner-radius 8
    clip-to-geometry true
}

// Here is a useful example. Work around WezTerms initial configure bug
// by setting an empty default-column-width.
window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    // The regular expression can match anywhere in the string.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// Use lswt -j to find the app-id and title of views
window-rule {
    match title=r#"^Ediff$"#
    default-column-width { fixed 300; }
    max-width 700
    max-height 500
    min-height 500
}

window-rule {
    match app-id=r#"^Alacritty$"#
    default-column-width { fixed 700; }
}

window-rule {
    match app-id=r#"^emacs$"#
    default-column-width { proportion 1.0; }
}

window-rule {
    match app-id=r#"^pavucontrol$"#
    default-column-width { fixed 750; }
    open-on-output "eDP-1"
}

window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    block-out-from "screencast"
}

window-rule {
    match app-id=r#"^qalculate-gtk$"#

    min-height 600
    max-height 600

    max-width 600
    min-width 600
}
 

// window-rule {
//     match is-active=false
//     opacity 0.95
//     draw-border-with-background false
// }

binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.
    //
    // Most actions that you can bind here can also be invoked programmatically with
    // `niri msg action do-something`.

    // Mod-Shift-/, which is usually the same as Mod-?,
    // shows a list of important hotkeys.
    Mod+Shift+Slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+Return { spawn "alacritty"; }
    Mod+Shift+Return { spawn "emacs"; }
    Mod+Q { spawn "firefox"; }
    Mod+Space { spawn "launcher"; }
    Mod+Z { spawn "toggleNotificationCenter"; }

    Mod+L { spawn "waylock" "lock-niri"; }

    // You can also use a shell:
    // Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    XF86AudioRaiseVolume { spawn "volume" "inc"; }
    XF86AudioLowerVolume { spawn "volume" "dec"; }
    XF86AudioMute        { spawn "volume" "mute"; }

    XF86AudioMedia { spawn "playerctl" "play-pause"; }
    XF86AudioPlay  { spawn "playerctl" "play-pause"; }
    XF86AudioPrev  { spawn "playerctl" "previous"; }
    XF86AudioNext  { spawn "playerctl" "next"; }

    XF86MonBrightnessUp   { spawn "brightness" "inc"; }
    XF86MonBrightnessDown { spawn "brightness" "dec"; }


    Mod+Shift+Q { close-window; }

    Mod+Comma  { focus-column-left; }
    Mod+I  { focus-window-or-workspace-down; }
    Mod+E    { focus-window-or-workspace-up; }
    Mod+Period { focus-column-right; }

    Mod+WheelScrollDown cooldown-ms=150 { focus-column-left; }
    Mod+WheelScrollUp   cooldown-ms=150 { focus-column-right; }

    // Mod+H     { focus-column-left; }
    // Mod+J     { focus-window-down; }
    // Mod+K     { focus-window-up; }
    // Mod+L     { focus-column-right; }

    Mod+Shift+Comma  { move-column-left; }
    Mod+Shift+I  { move-window-down-or-to-workspace-down; }
    Mod+Shift+E    { move-window-up-or-to-workspace-up; }
    Mod+Shift+Period { move-column-right; }
    // Mod+Ctrl+H     { move-column-left; }
    // Mod+Ctrl+J     { move-window-down; }
    // Mod+Ctrl+K     { move-window-up; }
    // Mod+Ctrl+L     { move-column-right; }

    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Shift+Home { move-column-to-first; }
    Mod+Shift+End  { move-column-to-last; }

    Mod+Ctrl+Comma  { focus-monitor-left; }
    Mod+Ctrl+Down  { focus-monitor-down; }
    Mod+Ctrl+Up    { focus-monitor-up; }
    Mod+Ctrl+Period { focus-monitor-right; }

    Mod+Shift+Ctrl+Comma  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+I  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+E    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Period { move-column-to-monitor-right; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+N      { focus-workspace-down; }
    Mod+P        { focus-workspace-up; }
    // Mod+U              { focus-workspace-down; }
    // Mod+I              { focus-workspace-up; }
    Mod+Shift+N { move-window-to-workspace-down; }
    Mod+Shift+P   { move-window-to-workspace-up; }
    //    Mod+Ctrl+U         { move-column-to-workspace-down; }
    //    Mod+Ctrl+I         { move-column-to-workspace-up; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+N { move-window-to-workspace-down; }
    // ...

    // Mod+Shift+N { move-workspace-down; }
    // Mod+Shift+P   { move-workspace-up; }
    // Mod+Shift+U         { move-workspace-down; }
    // Mod+Shift+I         { move-workspace-up; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Shift+1 { move-window-to-workspace 1; }
    Mod+Shift+2 { move-window-to-workspace 2; }
    Mod+Shift+3 { move-window-to-workspace 3; }
    Mod+Shift+4 { move-window-to-workspace 4; }
    Mod+Shift+5 { move-window-to-workspace 5; }
    Mod+Shift+6 { move-window-to-workspace 6; }
    Mod+Shift+7 { move-window-to-workspace 7; }
    Mod+Shift+8 { move-window-to-workspace 8; }
    Mod+Shift+9 { move-window-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Mod+Shift+Y  { consume-window-into-column; }
    // Mod+Shift+U { expel-window-from-column; }


    // There are also commands that consume or expel a single window to the side.
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    Mod+R { switch-preset-column-width; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+C { center-column; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Print { spawn "screenshot"; }
    // Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    // If you want to skip the confirmation dialog, set the flag like so:
    // Mod+Shift+E { quit skip-confirmation=true; }
    Mod+Ctrl+E { quit; }

    //    Mod+Shift+P { power-off-monitors; }

    // This debug bind will tint all surfaces green, unless they are being
    // directly scanned out. It is therefore useful to check if direct scanout
    // is working.
    // Mod+Shift+Ctrl+T { toggle-debug-tint; }
}
